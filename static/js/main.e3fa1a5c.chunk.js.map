{"version":3,"sources":["components/ContactForm/ContactForm.styled.jsx","redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/App.jsx","redux/phonebook/phonebook-reducers.js","redux/store.js","index.js"],"names":["Form","styled","form","Label","label","addContact","createAction","deleteContact","filterContacts","getItems","state","contacts","items","getFilter","filter","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","onSubmit","e","preventDefault","length","some","contact","toLowerCase","alert","actions","id","uuidv4","type","value","onChange","target","pattern","title","required","Filter","Button","button","Li","li","P","p","ContactList","filteredContacts","includes","map","onClick","App","itemsReducer","createReducer","payload","item","filterReducer","contactsReducer","combineReducers","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","persistReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e3fa1a5c.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px black solid;\r\n  padding: 30px;\r\n  width: 300px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  margin-bottom: 20px;\r\n  flex-direction: column;\r\n`;\r\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('phoneBook/addContact');\nexport const deleteContact = createAction('phoneBook/deleteContact');\nexport const filterContacts = createAction('phoneBook/filterContacts');\n","export const getItems = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n","import React, { useState } from 'react';\r\nimport { Form, Label } from './ContactForm.styled';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../../redux/phonebook/phonebook-actions';\r\nimport { getItems } from '../../redux/phonebook/phonebook-selectors';\r\n\r\nexport const ContactForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const items = useSelector(getItems);\r\n\r\n  const dispatch = useDispatch();\r\n  const addContact = () =>\r\n    dispatch(actions.addContact({ name, id: uuidv4(), number }));\r\n\r\n  const formSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const isInList =\r\n      items.length > 0\r\n        ? items.some(\r\n            contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n          )\r\n        : false;\r\n\r\n    isInList ? alert(name + ' is already in contacts.') : addContact();\r\n\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={formSubmit}>\r\n      <Label>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={e => setName(e.target.value)}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </Label>\r\n\r\n      <Label>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={e => setNumber(e.target.value)}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </Label>\r\n      <button type=\"submit\">Add contact</button>\r\n    </Form>\r\n  );\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Label = styled.label`\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  width: 300px;\r\n  padding-left: 30px;\r\n  padding-right: 30px;\r\n`;\r\n","import { Label } from './Filter.styled';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../../redux/phonebook/phonebook-actions';\r\nimport { getFilter } from '../../redux/phonebook/phonebook-selectors.js';\r\n\r\nexport const Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(getFilter);\r\n\r\n  return (\r\n    <Label>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={e => dispatch(actions.filterContacts(e.target.value))}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n    </Label>\r\n  );\r\n};\r\n","import styled from '@emotion/styled';\r\nexport const Button = styled.button`\r\n  margin-left: 10px;\r\n  height: 30px;\r\n  display: inline-block;\r\n`;\r\n\r\nexport const Li = styled.li`\r\n  align-items: center;\r\n  list-style-type: circle;\r\n  list-style-color: black;\r\n`;\r\n\r\nexport const P = styled.p`\r\n  display: inline-block;\r\n`;\r\n","import { Button, Li, P } from './ContactList.styled';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../../redux/phonebook/phonebook-actions';\r\nimport { getFilter, getItems } from '../../redux/phonebook/phonebook-selectors';\r\n\r\nexport const ContactList = () => {\r\n  const items = useSelector(getItems);\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  const filteredContacts = items.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n\r\n  return (\r\n    filteredContacts.length > 0 && (\r\n      <ul>\r\n        {filteredContacts.map(contact => (\r\n          <Li key={contact.id}>\r\n            <P>\r\n              {contact.name}:{contact.number}\r\n            </P>\r\n            <Button\r\n              id={contact.id}\r\n              type=\"button\"\r\n              onClick={e => dispatch(actions.deleteContact(e.target.id))}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </Li>\r\n        ))}\r\n      </ul>\r\n    )\r\n  );\r\n};\r\n","import { ContactForm } from './ContactForm/ContactForm';\r\nimport { Filter } from './Filter/Filter';\r\nimport { ContactList } from './ContactList/ContactList';\r\n\r\nexport const App = () => {\r\n  // useEffect(() => {\r\n  //   const parseLocalContacts = JSON.parse(localStorage.getItem('contacts'));\r\n  //   if (parseLocalContacts) {\r\n  //     setContacts(parseLocalContacts);\r\n  //   }\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   window.localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  // }, [contacts]);\r\n\r\n  return (\r\n    <>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, filterContacts } from './phonebook-actions';\n\nconst itemsReducer = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) => state.filter(item => item.id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n  [filterContacts]: (state, { payload }) => payload,\n});\n\nexport const contactsReducer = combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n","import { contactsReducer } from './phonebook/phonebook-reducers';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n  key: 'items',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(persistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App.jsx';\nimport { store, persistor } from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}